{"version":3,"sources":["Table/Table.module.css","api/index.js","Table/index.js","Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","getPlanetData","a","get","data","console","error","richnessValues","Perfect","Medium","Rich","Poor","fuzzyTextFilterFn","rows","id","filterValue","matchSorter","keys","row","values","autoRemove","val","Table","filterTypes","useMemo","fuzzyText","text","filter","rowValue","undefined","String","toLowerCase","startsWith","richnessSorter","b","Math","max","resourceRichness","split","map","x","columns","Header","accessor","resources","type","join","Cell","v","value","richness","sortType","DefaultColumnFilter","column","preFilteredRows","setFilter","count","length","onChange","e","target","placeholder","defaultColumn","React","Filter","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","prepareRow","className","styles","table","headers","headerGroup","getHeaderGroupProps","headerCell","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","i","getRowProps","cells","cell","getCellProps","Dashboard","useState","setData","useEffect","then","planetData","dashboard","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a9ec1bb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__1NoqE\",\"headers\":\"Table_headers__-pM1R\",\"cell\":\"Table_cell__PnbmA\",\"headerCell\":\"Table_headerCell__pcSX_\"};","import axios from \"axios\";\n\nconst baseURL = \"https://everaiders.azurewebsites.net/\";\n\nconst instance = axios.create({\n  baseURL,\n  // timeout: 1000,\n  // headers: {'X-Custom-Header': 'foobar'}\n});\n\nexport const getPlanetData = async () => {\n  try {\n    const { data } = await instance.get(\"/api/planets\");\n    return { data };\n  } catch (e) {\n    console.error(e);\n    return { error: e };\n  }\n};\n","import React, { useMemo } from \"react\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport styles from \"./Table.module.css\";\n\nconst richnessValues = {\n  Perfect: 3,\n  Medium: 2,\n  Rich: 1,\n  Poor: 0,\n};\n\nconst fuzzyTextFilterFn = (rows, id, filterValue) =>\n  matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\nconst Table = ({ data }) => {\n  const filterTypes = useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  const richnessSorter = useMemo(\n    () => (a, b) =>\n      Math.max(\n        ...a.values.resourceRichness.split(\", \").map((x) => richnessValues[x])\n      ) >\n      Math.max(\n        ...b.values.resourceRichness.split(\", \").map((x) => richnessValues[x])\n      )\n        ? 1\n        : -1,\n    []\n  );\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"Type\",\n        accessor: \"type\",\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"System\",\n        accessor: \"system\",\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"Constellation\",\n        accessor: \"constellation\",\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"Resources\",\n        accessor: \"resources\",\n        filter: \"fuzzyText\",\n        columns: [\n          {\n            id: \"resourceType\",\n            Header: \"Type\",\n            accessor: (row) => row.resources.map(({ type }) => type).join(\", \"),\n            Cell: (v) => v.value.split(\", \").map((x) => <div>{x}</div>),\n            filter: \"fuzzyText\",\n          },\n          {\n            id: \"resourceRichness\",\n            Header: \"Richness\",\n            accessor: (row) =>\n              row.resources.map(({ richness }) => richness).join(\", \"),\n            Cell: (v) => v.value.split(\", \").map((x) => <div>{x}</div>),\n            filter: \"fuzzyText\",\n            sortType: richnessSorter,\n          },\n        ],\n      },\n    ],\n    []\n  );\n\n  // Define a default UI for filtering\n  function DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n  }) {\n    const count = preFilteredRows.length;\n\n    return (\n      <input\n        value={filterValue || \"\"}\n        onChange={(e) => {\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    );\n  }\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n    },\n    useFilters,\n    useSortBy\n  );\n\n  return (\n    <>\n      <table className={styles.table} {...getTableProps()}>\n        <thead className={styles.headers}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th\n                  className={styles.headerCell}\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                >\n                  {column.render(\"Header\")}\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                  <span>\n                    {column.isSorted ? (column.isSortedDesc ? \"ðŸ”½\" : \"ðŸ”¼\") : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr className={styles.row} {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td className={styles.cell} {...cell.getCellProps()}>\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { getPlanetData } from \"../api\";\nimport Table from \"../Table\";\nimport styles from \"./Dashboard.module.css\";\n\nconst Dashboard = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    getPlanetData().then(setData);\n  }, []);\n\n  const { data: planetData = [], error } = data;\n\n  return (\n    <div className={styles.dashboard}>\n      {error && <div>{error}</div>}\n      <Table data={planetData} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./Dashboard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}